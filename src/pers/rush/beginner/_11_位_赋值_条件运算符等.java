package pers.rush.beginner;

public class _11_位_赋值_条件运算符等 {

	public static void main(String[] args) {
		/* 1.~ 按位取反 1 = ~0 0 = ~1
		 * 2.& 按位与 0&1=0 1&1=1 0&0=0
		 * 3.| 按位或 0|1=1 0|0=0 1|0=1
		 * 4.^ 按位异或 0^1=1 1^1=0 0^0=0 相同为0 不同为1
		 */
		/* 0的2进制 00000000
		 * 取反为 11111111
		 * 因为符号位是1 所以是负的
		 * 按补码来计算是取反+1 取反是00000000 + 1 = 00000001
		 * 然后再加上符号位是-1
		 */
		System.out.println(~0); 
		/* 1的2进制 00000001
		 * 取反为 11111110
		 * 因为符号位是1 所以是负的
		 * 按补码来计算是取反+1 取反是00000001 + 1 = 00000002
		 * 然后再加上符号位是-2
		 */
		System.out.println(~1);
		int x = 53; 
		/* 00110101
		 * 取反为11001010 符号为负
		 * 取反+1=00110101+1=00110110=54
		 * -54
		 */
		System.out.println(~x);
		int bin = 0b00001111;
		System.out.println(bin);
		/* 移位运算符
		 * << 算术左移
		 * >> 算术右移
		 * >>> 逻辑右移
		 * 优先级别:~ << >> >>> & ^
		 */
		System.out.println(9 << 2); // 左移1位就是*2
		System.out.println(3 >> 1); // 右移1位就是/2
		System.out.println(-12 >>> 2); // 逻辑右移左侧都是用0填充
		System.out.println(12 >>> 2); // 只有负数的逻辑右移会变正数
		System.out.println(-1 >>> 32);
		/* 扩展赋值运算符
		 * += -= *= /= %= &= |= ^= >>= <<= >>>=
		 * 条件运算符
		 * 逻辑表达式 ? 表达式1 : 表达式2 
		 */
	}

}
